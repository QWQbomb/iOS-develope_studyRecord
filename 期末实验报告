简单商品页面实现
一、课题内容和要求
使用Objective-C 代码实现简单的商品页面。
要求有商品图片、价格、名称等信息。排版整齐，页面美观。

二、实验原理及内容
主要使用UITableView 和NSArray 来实现，因为UITableView 继承自UIScrollView，支持垂直滚动，性能极佳，用来实现简单商品页面效果较好；NSArray 数组，方便从文件中取出字典数组，转为需要的模型数组。
UITableView需要一个数据源(dataSource) 来显示数据，且会向数据源查询一共有多少行数据以及每一行显示什么数据等，凡是遵守UITableViewDataSource协议的OC对象，都可以是UITableView的数据源。

三、源程序代码 
1．初始的-(void)viewDidLoad 函数实现代码
①　 核心代码：
-(void)viewDidLoad{
	[super viewDidLoad];
	//self.tableView.dataSource = self;
	//加载plist文件	
	NSArray *dictArray = [NSArray arrayWithContentsOfFile:
	[NSBundle mainBundle]pathForResource:@"phone.plist" ofType:nil]];
	
	NSMutableArray *temp = [NSMutableArray array];
	//plist文件中取出的字典数组 转为 phone模型数组
	for (NSDictionary *dict in dictArray){
		Phone *phone = [Phone phoneWithDict:dict];
		[temp addObject:phone];
	}
	self.phones = temp;
	//设置tableView每一行Cell的高度
	self.tableView.rowHeight = 50;
	//测试:NSLog(@"-----%ld",self.phones.count);
	//设置tableView每一组的头部高度
	self.tableView.sectionHeaderHeight = 80;
	//设置分割线的颜色
	//self.tableView.separatorColor = [UIColor clearColor];
	//设置分割线的样式
	self.tableView.separatorStyle = UITableViewCellSeparatorStyleNone;
	//设置表头表尾控件
	self.tableView.tableViewHeaderView = [[UISwitch alloc] init];
	self.tableView.tableViewFooterView = [[UISwitch alloc] init];
}



2．每一行显示的内容 实现代码：
①　核心代码
/* 每一行显示的内容 */
- (UITableViewCell *)tableView:(UITableView *)tableView cellForRowAtIndexPath:(NSIndexPath *)indexPath{
    
    UITableViewCell *cell = [[UITableViewCell alloc] initWithStyle:UITableViewCellStyleSubtitle reuseIdentifier:nil];
    //设置最右边的指示图标
    cell.accessoryType = UITableViewCellAccessoryDisclosureIndicator;
    
    //设置选中样式
    cell.selectionStyle = UITableViewCellSelectionStyleBlue;
    
    //设置cell的背景颜色
   // cell.backgroundColor = [UIColor greenColor];
    
    //设置cell的背景View
//    UIView *bg = [[UIView alloc] init];
//    bg.backgroundColor = [UIColor blueColor];
//    cell.backgroundView = bg;
    
    //取出indexPath.row对应的每行手机模型
    Phone *phone = self.phones[indexPath.row];
    
    //设置数据
    cell.imageView.image = [UIImage imageNamed:phone.image];
    
    //设置cell中图片的固定大小
    CGSize itemSize = CGSizeMake(50, 70);
    UIGraphicsBeginImageContextWithOptions(itemSize ,NO ,UIScreen.mainScreen.scale);
    CGRect imageRect = CGRectMake(0.0, 0.0, itemSize.width, itemSize.height);
    [cell.imageView.image drawInRect:imageRect];
    cell.imageView.image = UIGraphicsGetImageFromCurrentImageContext();
    UIGraphicsEndImageContext();
    
    cell.textLabel.text = phone.name;
    cell.detailTextLabel.text=[NSString stringWithFormat:@"¥%@",phone.money];
    cell.detailTextLabel.textColor = [UIColor orangeColor];
    return cell;
}


3．告诉TableView 一共有几组 实现代码：
①　核心代码
/* 告诉TableView一共有几组 */
/* 如果不实现，默认就是1组 */
//-(NSInteger)numberOfSectionsInTableView:(UITableView *)tableView{
//    return 1;
//}
/* 每一组有多少行 */
-(NSInteger)tableView:(UITableView*)tableView numberOfRowsInSection:(NSInteger)section{
    return self.phones.count;
}




四、测试数据及其结果分析
1.	测试APP能否达到要求且正常执行
(1)	测试方法：编译成功后打开APP查看是否显示正常
(2)	测试结果：（图片放不上来）
 

五、课题完成过程中遇到的问题及解决方法
问题1：一开始cell中的图片会因为原图的大小不同而显示不同大小，导致界面十分不美观。
解决方法：加入固定cell中图片大小的代码即可实现统一大小，排版整齐。代码已在上面核心代码处贴出。
问题2：最初写完后有一个大体的样子，不过没有选中样式和最右边的小三角指示图标，并不能算符合要求的商品页面。
解决方法：设置cell 自带的accessoryType 与selectionStyle 即可，具体代码也已经在上面核心代码处贴出。
